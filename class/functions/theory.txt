// what is function
// function is a block of code which can be called multiple times from different parts of the program.
// function can take arguments and return values.
// function is a reusable block of code.
// function can be used to perform a specific task.


syntax:
data_type function_name(para1, para2,...paran){
    // block of code
}

function_name(val1, val2,..., valn)

int a = 10
int b = 20
int c =  a + b


int d = 30
int e = 40
int f = d + e


Example - 1:

#include <stdio.h>

void add(int a, int b){
    printf("Total = %d\n", a+b);
}

int main() {
    add(10, 20);
    add(30, 40);
    add(300, 400);

    return 0;
}

there are 2 types of functions
1. built-in functions
2. user-defined functions
    1] without return_type and without para

        #include <stdio.h>

        void add(){
            int a = 10, b = 20;
            printf("Total = %d\n", a+b);
        }

        int main() {
            add();
            add();
            add();

            return 0;
        }

    2] with return_type and without para

        #include <stdio.h>

        int add(){
            int a = 10, b = 20;
            return  a+b;
        }

        int main() {
            int res = add();
            printf("Total: %d\n", res);
            printf("Total: %d\n", res + 20);
            printf("Total: %d\n", res * 20);

            return 0;
        }

    3] without return_type and with para

        #include <stdio.h>

        void add(int a , int b){
            printf("Total: %d\n", a+b);
        }

        int main() {
            add(10, 20);
            return 0;
        }

    4] with return_type and with para


        #include <stdio.h>

        int add(int a , int b){
            return  a+b;
        }

        int main() {
            int res = add(10, 20);
            printf("Total: %d\n", res);
            printf("Total: %d\n", res + 20);
            printf("Total: %d\n", res * 20);

            return 0;
        }

Recursion:
Recursion is a programming technique where a function calls itself until it reaches a base case that stops the
recursion.

1 * 2 * 3 * 4 * 5 *....* n = 120;


#include <stdio.h>

int factorial(int num){
    if(num == 1){
        printf(" %d =", num);
        return 1;
    }else{
        printf(" %d *", num);
        return num * factorial(num - 1);
    }
}

int main() {
   printf(" %d", factorial(5));
    
}



(1 + 2) + (2 + 3) + ..... + (n + n+1);


#include <stdio.h>

int series(int num){
    if(num == 1){
        printf(" (%d + %d) = ", num, num+1);
        return 1;
    }else{
        printf(" (%d + %d) + ", num, num+1);
        return (num + (num+1)) + factorial(num - 1);
    }
}

int main() {
   printf(" %d", series(5));
    
}

0 1 1 2 3 5 8 13......
1 + 2 + 3 + 4 +.....+n
1 + 3 + 5 + 7 + ..... + n

10 - 2 = 8
9 - 2 = 7
8 - 2 = 6